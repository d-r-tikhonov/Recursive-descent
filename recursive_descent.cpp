//======================================================================================================================================

#include "recursive_descent.h"

const char* s = nullptr;

//======================================================================================================================================

int GetN ()
{
    int value = 0;
    const char* sOld = s;

    while ('0' <= *s && *s <= '9')
    {
        value = 10 * value + *s - 48;
        s++;
    }
    
    assert (s != sOld);

    return value;
}

//======================================================================================================================================

int GetG (const char* str)
{
    s = str;

    int value = GetE ();
    assert (*s == '\0');

    return value;
}

//======================================================================================================================================

int GetE ()
{
    int value = 0;
    value = GetT ();

    while (*s == '+' || *s == '-')
    {
        char op = *s;
        s++;

        int addValue = GetT ();

        if (op == '+')
        {
            value = value + addValue;
        }
        else if (op == '-')
        {
            value = value - addValue;
        }
        else
        {
            printf ("Syntax error! Error in %s. It is ['+' '-'] error!\n", __func__);
        }
    }

    return value;
}

//======================================================================================================================================

int GetT ()
{
    int value = 0;
    value = GetP ();

    while (*s == '*' || *s == '/')
    {
        char op = *s;
        s++;

        int addValue = GetP ();

        if (op == '*')
        {
            value = value * addValue;
        }
        else if (op == '/')
        {
            value = value / addValue;
        }
        else
        {
            printf ("Syntax error! Error in %s. It is ['*' '/'] error!\n", __func__);
        }
    }

    return value;
}

//======================================================================================================================================

int GetP ()
{
    int value = 0;
    
    if (*s == '(')
    {
        s++;
        
        value = GetE ();
        assert (*s == ')');
        
        s++;
    }
    else
    {
        value = GetN ();
    }

    return value;
}

//======================================================================================================================================